<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/task
   		http://www.springframework.org/schema/task/spring-task-4.0.xsd
		http://code.alibabatech.com/schema/dubbo
		http://code.alibabatech.com/schema/dubbo/dubbo.xsd">

    <import resource="config/*.xml"/>
    <!--数据源-->
    <context:property-placeholder location="classpath:jdbc.properties"/>
    <!-- 阿里巴巴数据源  druid   -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <!-- 驱动 -->
        <property name="driverClassName" value="${driverClassName}"/>
        <property name="url" value="${url}"/>
        <property name="username" value="${user}"/>
        <property name="password" value="${password}"/>
    </bean>

    <!-- 扫描 -->
    <context:component-scan base-package="com.zjc"/>

    <!-- 事务-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!-- 开启注解 -->
    <tx:annotation-driven/>

    <!-- sqlSessionFactory 工厂   mybatis-3.2.7   mybaits-spring-1.2.2.jar-->
    <bean class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 数据源 -->
        <property name="dataSource" ref="dataSource"/>
        <!-- 配置Mybatis核心配置文件所在位置 -->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
    </bean>


    <!-- 3种  第一种：原始Dao开始  接口 实现类 Mapper -->
    <!-- 3种  第二种：接口   Mapper  手动实例化-->
    <!-- 3种  第三种：接口   Mapper 扫描方式 自动 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 扫描的包 -->
        <property name="basePackage" value="com.zjc.core.dao"/>
    </bean>


    <!-- Redis  配置 -->
    <bean id="jedis" class="redis.clients.jedis.Jedis">
        <constructor-arg value="192.168.40.132" index="0" type="java.lang.String"/>
        <constructor-arg value="6379" index="1"/>
    </bean>
    <!--Solr配置-->
    <bean id="httpSolrClient" class="org.apache.solr.client.solrj.impl.HttpSolrClient">
        <constructor-arg ref="builder"/>
    </bean>
    <bean id="builder" class="org.apache.solr.client.solrj.impl.HttpSolrClient.Builder">
        <constructor-arg value="http://localhost:8983/solr"/>
    </bean>
</beans>